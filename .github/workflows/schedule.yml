---

name: Check & Deploy POE
on:
  schedule:
      - cron: '0 */1 * * *'
      
jobs:

  Setup:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}
      LATEST_BRANCH: ${{ env.LATEST_BRANCH }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && (( startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push' ) || github.event_name == 'schedule' )
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          
      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release' ))
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV
          
      - name: Set env to PROD
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner == 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release/3' ))
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV
          
      - name: Set latest branch
        run: |
            echo "LATEST_BRANCH=$(git branch -a | grep release | egrep -o '([0-9]+\.){2}[0-9]+' | sort --version-sort | tail -n 1)" >> $GITHUB_ENV
        shell: bash
      

  Check_POE:
    runs-on: ubuntu-latest
    needs: [Setup]
    if: needs.Setup.outputs.ENVIRONMENT == 'DEV'
    outputs:
      UPGRADE: ${{ env.UPGRADE }}
    env:
      LOCAL_LOCALE: /tmp/local
      REMOTE_LOCALE: /tmp/remote
      LATEST_BRANCH: ${{ needs.Setup.outputs.LATEST_BRANCH }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: release/${{ env.LATEST_BRANCH }}

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
           workflow: schedule.yml
           workflow_conclusion: success
           name: locales
           path: ${{ env.LOCAL_LOCALE }}
        continue-on-error: true
          
      - name: Download REMOTE from POEditor
        run: |
          sh  locales/scripts/download_all.sh -i ${{ secrets.POEDITOR_ID }} -t ${{ secrets.POEDITOR_TOKEN }} -o ${{ env.REMOTE_LOCALE }}
        shell: bash
      
      - name: Diff LOCAL with REMOTE
        run: |
          if ! diff -rq ${{ env.LOCAL_LOCALE }} ${{ env.REMOTE_LOCALE }} 2>/dev/null
          then 
            echo "UPGRADE=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Update LOCAL artefact
        uses: actions/upload-artifact@master
        with:
          name: locales
          path: ${{ env.REMOTE_LOCALE }}
        if: env.UPGRADE == 'true'

      - name: Stay with LOCAL version
        uses: actions/upload-artifact@master
        with:
          name: locales
          path: ${{ env.LOCAL_LOCALE }}
        if: env.UPGRADE != 'true'

  Test:
    runs-on: ubuntu-latest
    needs: [Setup,Check_POE]
    env:
      LATEST_BRANCH: ${{ needs.Setup.outputs.LATEST_BRANCH }}
    if: needs.Setup.outputs.ENVIRONMENT == 'DEV' &&
        needs.Check_POE.outputs.UPGRADE
    strategy:
      matrix:
        node-version: [13.x]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: release/${{ env.LATEST_BRANCH }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install

      - run: yarn test

  Build:
    runs-on: ubuntu-latest
    needs: [Setup,Check_POE]
    if: needs.Setup.outputs.ENVIRONMENT == 'DEV' &&
        needs.Check_POE.outputs.UPGRADE 
    strategy:
      matrix:
        node-version: [13.x]
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      UPGRADE: ${{ needs.Check_POE.outputs.UPGRADE }}
      LATEST_BRANCH: ${{ needs.Setup.outputs.LATEST_BRANCH }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: release/${{ env.LATEST_BRANCH }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
        
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set Env's
        run: echo "PROJECT_ENVS=${{ secrets[env.EV] }}" >> $GITHUB_ENV
        env:
          EV: "${{ env.ENVIRONMENT }}_ENV"
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}
        
      - name: Upload PL locale to the POEditor
        run: |
          sh  locales/scripts/upload.sh -l pl -i ${{ secrets.POEDITOR_ID }} -t ${{ secrets.POEDITOR_TOKEN }}
        if: env.ENVIRONMENT == 'DEV'
        
      - name: Setu Correct curl for static assets from cdn
        run: echo "CURL_COMMAND=${{ secrets[env.CURL] }}" >> $GITHUB_ENV
        env:
          CURL: "${{ env.ENVIRONMENT }}_CURL"
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Inject ENV's for builds
        run: 'echo "$PROJECT_ENVS" |base64 --decode > .env'
        shell: bash
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Exec correct curl
        run: 'base64 -d <<< $CURL_COMMAND | sh || true'
        shell: bash
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Show GITHUB_CONTEXT
        run: |
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        if: env.ENVIRONMENT != 'PROD'

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: locales
          path: locales/
        if: env.UPGRADE == 'true'

      - run: bash -c 'yarn audit --groups dependencies; [[ $? -gt 2 ]] && exit 1 || exit 0'
      - run: yarn install
      - run: yarn build

      - name: Archive Artifact
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build

  Deploy:
    needs: [Test,Setup,Check_POE,Build]
    runs-on: ubuntu-latest
    if: needs.Setup.outputs.ENVIRONMENT == 'DEV' &&
        needs.Check_POE.outputs.UPGRADE
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      UPGRADE: ${{ needs.Check_POE.outputs.UPGRADE }}
      LATEST_BRANCH: ${{ needs.Setup.outputs.LATEST_BRANCH }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: release/${{ env.LATEST_BRANCH }}

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build

      - name: Set Env's from Git refs.
        run: |
          echo "SOURCE_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "SOURCE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "GCP_SA_KEY=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "SECRET_PROJECT=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "SITE_PROJECT=${{ secrets[env.SITE_ENV] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"

      - name: Set SITE_PROJECT for V4 PROD
        run: |
          echo "SITE_PROJECT=${{ secrets[env.SITE_ENV] }}-v4" >> $GITHUB_ENV
        env:
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"
        if: ( env.ENVIRONMENT == 'PROD' && github.event.release.target_commitish == 'master' )

      - name: Set SITE_PROJECT for V3 in PROD
        run: |
          echo "SITE_PROJECT=${{ secrets[env.SITE_ENV] }}" >> $GITHUB_ENV
        env:
          SITE_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_SITE"
        if: ( env.ENVIRONMENT == 'PROD' && startsWith( github.event.release.target_commitish, 'release/3' ) )

      - run: cp firebase.json build/

      - name: Sed Firebase.json
        run: sed -ie 's|site_to_sed|${{ env.SITE_PROJECT }}|g' firebase.json

      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting --project $SECRET_PROJECT
