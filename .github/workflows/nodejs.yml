---

name: Test & Build
on:
  release:
    types:
      - created
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'

jobs:

  Setup:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}
    steps:
      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release/')
            && github.event_name == 'push'
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV

      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release' ))
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV

      - name: Set env to PROD
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner == 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release/3' ))
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV

  Test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install
      - run: yarn test

  Build:
    runs-on: ubuntu-latest
    needs: [Setup]
    strategy:
      matrix:
        node-version: [13.x]
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set Env's
        run: echo "PROJECT_ENVS=${{ secrets[env.EV] }}" >> $GITHUB_ENV
        env:
          EV: "${{ env.ENVIRONMENT }}_ENV"
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Upload PL locale to the POEditor
        run: |
          sh  locales/scripts/upload.sh -l pl -i $POEDITOR_ID -t $POEDITOR_TOKEN | grep '"code":"200"' || exit 1
        if: env.ENVIRONMENT == 'DEV'
        env:
          POEDITOR_ID: ${{ secrets.POEDITOR_ID }}
          POEDITOR_TOKEN: ${{ secrets.POEDITOR_TOKEN }}

      - name: Setu Correct curl for static assets from cdn
        run: echo "CURL_COMMAND=${{ secrets[env.CURL] }}" >> $GITHUB_ENV
        env:
          CURL: "${{ env.ENVIRONMENT }}_CURL"
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Inject ENV's for builds
        run: 'echo "$PROJECT_ENVS" |base64 --decode > .env'
        shell: bash
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Exec correct curl
        run: 'base64 -d <<< $CURL_COMMAND | sh || true'
        shell: bash
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Show GITHUB_CONTEXT
        run: |
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        if: env.ENVIRONMENT != 'PROD'

      - run: bash -c 'yarn audit --groups dependencies; [[ $? -gt 2 ]] && exit 1 || exit 0'
      - run: yarn install
      - run: yarn build

      - name: Archive Artifact
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build
